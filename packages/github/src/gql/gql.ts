/* eslint-disable */
import * as types from './graphql';
import type { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "query GetUserContributions($username: String!, $from: DateTime!, $to: DateTime!, $issueSearchQuery: String!, $mergedPRSearchQuery: String!) {\n  user(login: $username) {\n    contributionsCollection(from: $from, to: $to) {\n      commitContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          totalCount\n          nodes {\n            commitCount\n            occurredAt\n          }\n        }\n      }\n      pullRequestContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              state\n              merged\n            }\n          }\n        }\n      }\n      pullRequestReviewContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              author {\n                login\n                __typename\n              }\n            }\n            pullRequestReview {\n              url\n            }\n          }\n        }\n      }\n      issueContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            issue {\n              number\n              title\n              url\n            }\n          }\n        }\n      }\n      repositoryContributions(first: 100) {\n        nodes {\n          repository {\n            name\n            owner {\n              login\n            }\n            description\n            url\n            createdAt\n            isFork\n            stargazerCount\n            primaryLanguage {\n              name\n              color\n            }\n          }\n          occurredAt\n        }\n      }\n    }\n  }\n  search(query: $issueSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on Issue {\n        number\n        title\n        url\n        createdAt\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n  mergedPRs: search(query: $mergedPRSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on PullRequest {\n        number\n        title\n        url\n        createdAt\n        merged\n        mergedBy {\n          login\n        }\n        author {\n          login\n        }\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n}": typeof types.GetUserContributionsDocument,
};
const documents: Documents = {
    "query GetUserContributions($username: String!, $from: DateTime!, $to: DateTime!, $issueSearchQuery: String!, $mergedPRSearchQuery: String!) {\n  user(login: $username) {\n    contributionsCollection(from: $from, to: $to) {\n      commitContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          totalCount\n          nodes {\n            commitCount\n            occurredAt\n          }\n        }\n      }\n      pullRequestContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              state\n              merged\n            }\n          }\n        }\n      }\n      pullRequestReviewContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              author {\n                login\n                __typename\n              }\n            }\n            pullRequestReview {\n              url\n            }\n          }\n        }\n      }\n      issueContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            issue {\n              number\n              title\n              url\n            }\n          }\n        }\n      }\n      repositoryContributions(first: 100) {\n        nodes {\n          repository {\n            name\n            owner {\n              login\n            }\n            description\n            url\n            createdAt\n            isFork\n            stargazerCount\n            primaryLanguage {\n              name\n              color\n            }\n          }\n          occurredAt\n        }\n      }\n    }\n  }\n  search(query: $issueSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on Issue {\n        number\n        title\n        url\n        createdAt\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n  mergedPRs: search(query: $mergedPRSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on PullRequest {\n        number\n        title\n        url\n        createdAt\n        merged\n        mergedBy {\n          login\n        }\n        author {\n          login\n        }\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n}": types.GetUserContributionsDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetUserContributions($username: String!, $from: DateTime!, $to: DateTime!, $issueSearchQuery: String!, $mergedPRSearchQuery: String!) {\n  user(login: $username) {\n    contributionsCollection(from: $from, to: $to) {\n      commitContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          totalCount\n          nodes {\n            commitCount\n            occurredAt\n          }\n        }\n      }\n      pullRequestContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              state\n              merged\n            }\n          }\n        }\n      }\n      pullRequestReviewContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              author {\n                login\n                __typename\n              }\n            }\n            pullRequestReview {\n              url\n            }\n          }\n        }\n      }\n      issueContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            issue {\n              number\n              title\n              url\n            }\n          }\n        }\n      }\n      repositoryContributions(first: 100) {\n        nodes {\n          repository {\n            name\n            owner {\n              login\n            }\n            description\n            url\n            createdAt\n            isFork\n            stargazerCount\n            primaryLanguage {\n              name\n              color\n            }\n          }\n          occurredAt\n        }\n      }\n    }\n  }\n  search(query: $issueSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on Issue {\n        number\n        title\n        url\n        createdAt\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n  mergedPRs: search(query: $mergedPRSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on PullRequest {\n        number\n        title\n        url\n        createdAt\n        merged\n        mergedBy {\n          login\n        }\n        author {\n          login\n        }\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query GetUserContributions($username: String!, $from: DateTime!, $to: DateTime!, $issueSearchQuery: String!, $mergedPRSearchQuery: String!) {\n  user(login: $username) {\n    contributionsCollection(from: $from, to: $to) {\n      commitContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          totalCount\n          nodes {\n            commitCount\n            occurredAt\n          }\n        }\n      }\n      pullRequestContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              state\n              merged\n            }\n          }\n        }\n      }\n      pullRequestReviewContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            pullRequest {\n              number\n              title\n              url\n              author {\n                login\n                __typename\n              }\n            }\n            pullRequestReview {\n              url\n            }\n          }\n        }\n      }\n      issueContributionsByRepository(maxRepositories: 100) {\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n        contributions(first: 100) {\n          nodes {\n            occurredAt\n            issue {\n              number\n              title\n              url\n            }\n          }\n        }\n      }\n      repositoryContributions(first: 100) {\n        nodes {\n          repository {\n            name\n            owner {\n              login\n            }\n            description\n            url\n            createdAt\n            isFork\n            stargazerCount\n            primaryLanguage {\n              name\n              color\n            }\n          }\n          occurredAt\n        }\n      }\n    }\n  }\n  search(query: $issueSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on Issue {\n        number\n        title\n        url\n        createdAt\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n  mergedPRs: search(query: $mergedPRSearchQuery, type: ISSUE, first: 100) {\n    nodes {\n      ... on PullRequest {\n        number\n        title\n        url\n        createdAt\n        merged\n        mergedBy {\n          login\n        }\n        author {\n          login\n        }\n        repository {\n          name\n          owner {\n            login\n          }\n          description\n          url\n          createdAt\n          isFork\n          stargazerCount\n          primaryLanguage {\n            name\n            color\n          }\n        }\n      }\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;