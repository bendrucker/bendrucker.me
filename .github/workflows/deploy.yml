name: Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'pages' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build site
        uses: withastro/action@v4


  cloudflare:
    if: (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == github.event.repository.default_branch)) && github.actor != 'dependabot[bot]'
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      deployments: write

    steps:
      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v4

      - name: "üì¶ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: "üì¶ Install dependencies"
        run: npm ci

      - name: "üöÄ Build"
        run: npm run build

      - name: "üìã Copy assets ignore file"
        run: cp .assetsignore dist/

      - name: "üåê Deploy to Cloudflare Workers"
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          command: ${{ github.event_name == 'pull_request' && format('versions upload --tag PR-{0} --message "Preview for PR {0} - {1}"', github.event.number, github.event.pull_request.html_url) || 'deploy' }}
          gitHubToken: ${{ github.token }}

      - name: "üìç Create deployment status"
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.deploy.outputs.deployment-url }}';
            
            if (deploymentUrl) {
              const isProduction = github.event_name === 'push' && '${{ github.ref_name }}' === '${{ github.event.repository.default_branch }}';
              const environment = isProduction ? 'production' : 'preview';
              const description = isProduction 
                ? 'Production deployment to Cloudflare Workers'
                : `Preview deployment for PR #${{ github.event.number }}`;
              
              // Create deployment
              const deployment = await github.rest.repos.createDeployment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: context.sha,
                environment: environment,
                production_environment: isProduction,
                transient_environment: !isProduction,
                required_contexts: [],
                auto_merge: false
              });
              
              // Create deployment status
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.data.id,
                state: 'success',
                environment_url: deploymentUrl,
                description: description
              });
            }

  lighthouse:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Copy assets ignore file
        run: cp .assetsignore dist/

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

