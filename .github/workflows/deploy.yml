name: Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'pages' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build site
        uses: withastro/action@v4


  cloudflare:
    if: (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == github.event.repository.default_branch)) && github.actor != 'dependabot[bot]'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      deployments: write
    strategy:
      matrix:
        include:
          - name: www
            path: .
          - name: github
            path: workers/github

    steps:
      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v4

      - name: "üì¶ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: "üì¶ Install dependencies"
        run: npm ci

      - name: "üîß Build shared packages"
        run: npm run build --workspace 'packages/**'

      - name: "üìã Copy assets ignore file"
        if: matrix.path == '.'
        run: cp .assetsignore dist/

      - name: "üìç Start deployment"
        id: deployment
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ github.token }}
          ref: ${{ github.head_ref || github.ref_name }}
          env: ${{ github.event_name == 'pull_request' && format('pr-{0}-{1}', github.event.number, matrix.name) || format('{0}-production', matrix.name) }}
          desc: ${{ github.event_name == 'pull_request' && format('Preview deployment for PR {0} - {1}', github.event.number, matrix.name) || format('Production deployment for {0}', matrix.name) }}

      - name: "üåê Deploy to Cloudflare"
        id: wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: ${{ matrix.path }}
          command: ${{ github.event_name == 'pull_request' && format('versions upload --tag PR-{0} --message "Preview for PR {0} - {1}" --preview-alias pr-{0}-{2}', github.event.number, github.event.pull_request.html_url, matrix.name) || 'deploy' }}
          gitHubToken: ${{ github.token }}

      - name: "üîó Extract alias URL"
        id: extract-url
        if: github.event_name == 'pull_request' && matrix.path == '.'
        run: |
          ALIAS_URL=$(echo "${{ steps.wrangler.outputs.command-output }}" | sed -n 's/.*Version Preview Alias URL: //p' | xargs)
          echo "alias-url=$ALIAS_URL" >> $GITHUB_OUTPUT

      - name: "üìç Finish deployment"
        if: always() && steps.deployment.outcome == 'success'
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ github.token }}
          ref: ${{ github.head_ref || github.ref_name }}
          status: ${{ steps.wrangler.outcome == 'success' && 'success' || 'failure' }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          env_url: ${{ github.event_name == 'pull_request' && matrix.path == '.' && steps.extract-url.outputs.alias-url || steps.wrangler.outputs.deployment-url }}


  lighthouse:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Copy assets ignore file
        run: cp .assetsignore dist/

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

