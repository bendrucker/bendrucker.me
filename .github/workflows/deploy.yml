name: Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

concurrency:
  group: ${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'pages' }}
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

permissions:
  contents: read
  deployments: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build site
        uses: withastro/action@v4


  cloudflare:
    if: (github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref_name == github.event.repository.default_branch)) && github.actor != 'dependabot[bot]'
    name: Deploy to Cloudflare Workers
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      deployments: write

    steps:
      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v4

      - name: "üì¶ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "npm"

      - name: "üì¶ Install dependencies"
        run: npm ci

      - name: "üöÄ Build"
        run: npm run build

      - name: "üìã Copy assets ignore file"
        run: cp .assetsignore dist/

      - name: "üìç Create deployment"
        id: create-deployment
        run: |
          ENVIRONMENT=${{ github.event_name == 'pull_request' && format('pr-{0}', github.event.number) || 'production' }}
          PRODUCTION=${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch }}
          TRANSIENT=${{ github.event_name == 'pull_request' }}
          
          DEPLOYMENT_ID=$(gh api repos/${{ github.repository }}/deployments \
            --method POST \
            --field ref=${{ github.sha }} \
            --field environment="$ENVIRONMENT" \
            --field production_environment="$PRODUCTION" \
            --field transient_environment="$TRANSIENT" \
            --field required_contexts='[]' \
            --field auto_merge=false \
            --jq '.id')
          
          echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: "üåê Deploy to Cloudflare Workers"
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ vars.CLOUDFLARE_ACCOUNT_ID }}
          command: ${{ github.event_name == 'pull_request' && format('versions upload --tag PR-{0} --message "Preview for PR {0} - {1}"', github.event.number, github.event.pull_request.html_url) || 'deploy' }}
          gitHubToken: ${{ github.token }}

      - name: "üìç Update deployment status"
        if: always()
        run: |
          STATE=${{ steps.deploy.outcome == 'success' && 'success' || 'failure' }}
          DESCRIPTION="${{ github.event_name == 'push' && github.ref_name == github.event.repository.default_branch && 'Production deployment to Cloudflare Workers' || format('Preview deployment for PR #{0}', github.event.number) }}"
          
          gh api repos/${{ github.repository }}/deployments/${{ steps.create-deployment.outputs.deployment-id }}/statuses \
            --method POST \
            --field state="$STATE" \
            --field environment_url="${{ steps.deploy.outputs.deployment-url }}" \
            --field description="$DESCRIPTION"

  lighthouse:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build site
        run: npm run build

      - name: Copy assets ignore file
        run: cp .assetsignore dist/

      - name: Run Lighthouse CI
        run: npm run lighthouse
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

