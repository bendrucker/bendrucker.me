---
import IconClock from "@/assets/icons/IconCalendar.svg";

export interface Props {
  class?: string;
  size?: "sm" | "lg";
  datetime: string | Date;
  showRelative?: boolean;
}

const {
  datetime,
  size = "sm",
  class: className = "",
  showRelative = false,
} = Astro.props;

// Convert to ISO string for client processing
const isoDatetime = new Date(datetime).toISOString();
---

<div 
  class:list={["flex items-center gap-x-2 opacity-80", className]}
  x-data="{
    datetime: $el.dataset.datetime,
    formatted: '',
    relative: '',
    showRelative: $el.dataset.showRelative === 'true',
    
    init() {
      this.updateTime();
      // Update relative time every minute if showing relative
      if (this.showRelative) {
        setInterval(() => this.updateTime(), 60000);
      }
    },
    
    updateTime() {
      const date = new Date(this.datetime);
      
      // Format absolute time in user's timezone
      this.formatted = date.toLocaleString('en-US', {
        month: 'short',
        day: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: '2-digit',
        timeZoneName: 'short'
      });
      
      // Calculate relative time
      if (this.showRelative) {
        const now = new Date();
        const diffMs = now - date;
        const diffMins = Math.floor(diffMs / 60000);
        const diffHours = Math.floor(diffMins / 60);
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffMins < 1) {
          this.relative = 'just now';
        } else if (diffMins < 60) {
          this.relative = `${diffMins}m ago`;
        } else if (diffHours < 24) {
          this.relative = `${diffHours}h ago`;
        } else if (diffDays < 7) {
          this.relative = `${diffDays}d ago`;
        } else {
          this.relative = this.formatted;
        }
      }
    }
  }"
  :data-datetime="isoDatetime"
  :data-show-relative="showRelative.toString()"
>
  <IconClock
    class:list={[
      "inline-block size-6 min-w-[1.375rem]",
      { "scale-90": size === "sm" },
    ]}
  />
  <time
    class:list={["text-sm", { "sm:text-base": size === "lg" }]}
    :datetime="datetime"
    x-text="showRelative ? relative : formatted"
    :title="showRelative ? formatted : ''"
  >
    <!-- Fallback for no-JS -->
    {new Date(isoDatetime).toLocaleString("en-US", {
      month: "short",
      day: "numeric", 
      year: "numeric",
      hour: "numeric",
      minute: "2-digit",
    })}
  </time>
</div>
