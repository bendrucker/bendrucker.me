---
// ThemeToggle.astro - Simple segmented control
---

<style>
  :root {
    --theme-animation-duration: 300ms;
    --theme-control-size: 2.5rem;
    --theme-control-expanded-width: calc(var(--theme-control-size) * 3);
    --theme-border-radius: calc(var(--theme-control-size) / 2);
    --theme-font-size: 1rem;
    --theme-border-width: 1px;
  }

  
  .theme-control-container {
    flex: 0;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .theme-control {
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--bg-secondary);
    border: var(--theme-border-width) solid var(--border-color);
    border-radius: var(--theme-border-radius);
    width: var(--theme-control-size);
    height: var(--theme-control-size);
    overflow: hidden;
    transition: width var(--theme-animation-duration) ease;
    position: relative;
  }

  .theme-control.expanded {
    width: var(--theme-control-expanded-width);
  }

  .theme-option {
    position: absolute;
    width: var(--theme-control-size);
    height: var(--theme-control-size);
    border: none;
    background: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: var(--theme-font-size);
    transition: all var(--theme-animation-duration) ease;
    opacity: 0;
    transform: translateX(0);
  }

  /* Custom focus styling for accessibility */
  .theme-option:focus-visible {
    outline: 2px solid var(--text-link);
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* Active item is always visible and centered when collapsed */
  .theme-control:not(.expanded) .theme-option.active {
    opacity: 1;
    left: 0;
    z-index: 10;
  }

  /* When expanded, all items are visible in fixed positions */
  .theme-control.expanded .theme-option.light {
    left: 0;
    opacity: 1;
  }
  
  .theme-control.expanded .theme-option.auto {
    left: var(--theme-control-size);
    opacity: 1;
  }
  
  .theme-control.expanded .theme-option.dark {
    left: calc(var(--theme-control-size) * 2);
    opacity: 1;
  }

  /* Hide non-active items when collapsed */
  .theme-control:not(.expanded) .theme-option:not(.active) {
    left: 0;
    opacity: 0;
  }

  .theme-control.expanded .theme-option:hover {
    background: var(--border-color);
    border-radius: 50%;
  }

  /* Prevent hover effects during transition */
  .theme-control.transitioning {
    pointer-events: none;
  }
</style>

<div class="theme-control-container">
  <div 
    class="theme-control"
    x-data="{ 
      expanded: false,
      transitioning: false,
      handleThemeChange(newTheme) {
        if (this.theme === newTheme) return;
        
        this.transitioning = true;
        this.expanded = false;
        
        // Wait for collapse animation to complete before changing theme
        const duration = parseInt(getComputedStyle(document.documentElement).getPropertyValue('--theme-animation-duration'));
        setTimeout(() => {
          this.setTheme(newTheme);
          this.transitioning = false;
        }, duration);
      }
    }"
    @mouseenter="!transitioning && (expanded = true)"
    @mouseleave="!transitioning && (expanded = false)"
    :class="{ expanded: expanded, transitioning: transitioning }"
    :data-active-theme="theme"
  >
    <button 
      class="theme-option light"
      :class="{ active: theme === 'light' }"
      @click="handleThemeChange('light')"
      title="Light"
      aria-label="Light"
    >
      ðŸŒž
    </button>
    <button 
      class="theme-option auto"
      :class="{ active: theme === 'auto' }"
      @click="handleThemeChange('auto')"
      title="Auto"
      aria-label="Auto"
    >
      âœ¨
    </button>
    <button 
      class="theme-option dark"
      :class="{ active: theme === 'dark' }"
      @click="handleThemeChange('dark')"
      title="Dark"
      aria-label="Dark"
    >
      ðŸŒš
    </button>
  </div>
</div>
