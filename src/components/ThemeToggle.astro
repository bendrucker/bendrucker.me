---
// ThemeToggle.astro - Simple segmented control
---

<style>
  .theme-control-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .theme-control {
    display: flex;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 20px;
    padding: 0;
    transition: all 0.3s ease;
    width: 40px;
    height: 40px;
    overflow: hidden;
  }

  .theme-control.expanded {
    width: 120px;
  }

  .theme-option {
    flex: 1;
    border: none;
    background: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 16px;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .theme-control:not(.expanded) .theme-option:not(.active) {
    display: none;
  }

  .theme-control:not(.expanded) .theme-option.active {
    opacity: 1;
    pointer-events: auto;
    transform: scale(1);
    border-radius: 20px;
    width: 100%;
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    bottom: 0;
  }

  .theme-control.expanded .theme-option {
    opacity: 1;
    pointer-events: auto;
    transform: scale(1);
  }

  .theme-control.expanded .theme-option:hover {
    background: var(--border-color);
  }

  .theme-control.expanded .theme-option:first-child {
    border-radius: 20px 0 0 20px;
  }

  .theme-control.expanded .theme-option:last-child {
    border-radius: 0 20px 20px 0;
  }

  .theme-control.expanded .theme-option:nth-child(2) {
    border-radius: 0;
  }

  /* Enhanced sliding animation during transitions */
  .theme-control.transitioning .theme-option {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  /* Ensure smooth reordering animation */
  .theme-control.transitioning {
    pointer-events: none;
  }
</style>

<div class="theme-control-container">
  <div 
    class="theme-control"
    x-data="{ 
      expanded: false,
      transitioning: false,
      getOrderedOptions() {
        const options = [
          { key: 'light', emoji: 'ðŸŒž', title: 'Light mode' },
          { key: 'dark', emoji: 'ðŸŒš', title: 'Dark mode' },
          { key: 'auto', emoji: 'âœ¨', title: 'Auto mode' }
        ];
        
        // Find active option and move to center
        const activeIndex = options.findIndex(opt => opt.key === this.theme);
        if (activeIndex === -1) return options;
        
        const active = options[activeIndex];
        const others = options.filter(opt => opt.key !== this.theme);
        
        // Return with active in center
        return [others[0], active, others[1]];
      },
      handleThemeChange(newTheme) {
        if (this.theme === newTheme) return;
        
        this.transitioning = true;
        
        // Keep expanded briefly to show the sliding animation
        setTimeout(() => {
          this.setTheme(newTheme);
        }, 50);
        
        // Then collapse after theme changes (so new order is set)
        setTimeout(() => {
          this.expanded = false;
        }, 200);
        
        // Clear transitioning state
        setTimeout(() => {
          this.transitioning = false;
        }, 600);
      }
    }"
    @mouseenter="!transitioning && (expanded = true)"
    @mouseleave="!transitioning && (expanded = false)"
    :class="{ expanded: expanded, transitioning: transitioning }"
  >
    <template x-for="(option, index) in getOrderedOptions()" :key="option.key">
      <button 
        class="theme-option"
        :class="{ active: theme === option.key }"
        @click="handleThemeChange(option.key)"
        :title="option.title"
        x-text="option.emoji"
      >
      </button>
    </template>
  </div>
</div>