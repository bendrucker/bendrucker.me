---
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import Layout from "../../layouts/Layout.astro";
import Main from "../../layouts/Main.astro";
import { SITE } from "../../config";
import type { RepoActivity } from "../../services/github";
import CircleDot from "@/assets/icons/circle-dot.svg";
import GitPullRequest from "@/assets/icons/git-pull-request.svg";
import Star from "@/assets/icons/star.svg";
import Checklist from "@/assets/icons/checklist.svg";
import GitMerge from "@/assets/icons/git-merge.svg";

// Type declaration for Cloudflare Workers KV
declare const ACTIVITY_KV: KVNamespace | undefined;

// Load activity data
let repositories: RepoActivity[] = [];

try {
  // Check if we're in a Cloudflare Workers environment
  if (typeof ACTIVITY_KV !== 'undefined') {
    // Production: read from KV storage
    const kvData = await ACTIVITY_KV.get('github-activity', 'json') as RepoActivity[] | null;
    if (kvData) {
      repositories = kvData.map(repo => ({
        ...repo,
        lastActivity: new Date(repo.lastActivity),
        createdAt: repo.createdAt ? new Date(repo.createdAt) : undefined
      }));
    }
  } else {
    // Development: try to load from local file
    const localDataPath = join(process.cwd(), 'tmp', 'github-activity.json');

    if (existsSync(localDataPath)) {
      const localData = JSON.parse(readFileSync(localDataPath, 'utf-8')) as RepoActivity[];
      repositories = localData.map(repo => ({
        ...repo,
        lastActivity: new Date(repo.lastActivity),
        createdAt: repo.createdAt ? new Date(repo.createdAt) : undefined
      }));
    }
  }
} catch {
  // Failed to load activity data - fallback to empty array
  repositories = [];
}



const isRepoNew = (repo: RepoActivity) => {
  if (!repo.createdAt) return false;
  const threeMonthsAgo = new Date(Date.now() - (90 * 24 * 60 * 60 * 1000));
  return repo.createdAt > threeMonthsAgo;
};

const formatDate = (date: Date) => {
  return date.toLocaleDateString("en-US", {
    month: "short",
    day: "numeric"
  });
};

const formatStarCount = (count: number) => {
  if (count < 1000) {
    return count.toString();
  }

  const thousands = Math.floor(count / 100) / 10;
  return `${thousands}k`;
};

const getGitHubSearchUrl = (repo: RepoActivity, type: 'pr' | 'review' | 'issue' | 'merge') => {
  const baseUrl = 'https://github.com/search';
  const repoQuery = `repo:${repo.owner}/${repo.name}`;

  // Add time filter - 1 year ago to match our activity data range
  const oneYearAgo = new Date(Date.now() - (365 * 24 * 60 * 60 * 1000));
  const timeFilter = `created:>${oneYearAgo.toISOString().split('T')[0]}`;

  let query = '';
  let searchType = '';

  switch (type) {
    case 'pr':
      query = `${repoQuery} is:pr is:merged author:${SITE.githubUsername} ${timeFilter}`;
      searchType = 'pullrequests';
      break;
    case 'review':
      query = `${repoQuery} is:pr is:merged reviewed-by:${SITE.githubUsername} ${timeFilter}`;
      searchType = 'pullrequests';
      break;
    case 'issue':
      query = `${repoQuery} is:issue involves:${SITE.githubUsername} updated:>${oneYearAgo.toISOString().split('T')[0]}`;
      searchType = 'issues';
      break;
    case 'merge':
      // Only show for user's own repos: all merged PRs not authored by them or bots
      query = `${repoQuery} is:pr is:merged -author:${SITE.githubUsername} -author:app/dependabot -author:app/renovate merged:>${oneYearAgo.toISOString().split('T')[0]}`;
      searchType = 'pullrequests';
      break;
  }

  return `${baseUrl}?q=${encodeURIComponent(query)}&type=${searchType}&s=created&o=desc`;
};

// Group repositories by year
const repositoriesByYear = repositories.reduce((acc, repo) => {
  const year = repo.lastActivity.getFullYear();
  if (!acc[year]) {
    acc[year] = [];
  }
  acc[year].push(repo);
  return acc;
}, {} as Record<number, RepoActivity[]>);

// Sort years in descending order
const sortedYears = Object.keys(repositoriesByYear)
  .map(Number)
  .sort((a, b) => b - a);

---

<Layout title={`Activity: Code | ${SITE.title}`} description="My public GitHub activity over the last year.">
  <Main pageTitle="Activity: Code" pageDesc="This page summarizes my GitHub activity over the last year. It is an index of recent software projects I am working on in public.">
    <section>
      <div class="mx-auto">
        {repositories.length === 0 ? (
          <div class="text-center py-8 space-y-3">
            <p class="text-skin-muted">No activity data available.</p>
            <div class="text-sm text-skin-muted space-y-2">
              <p><strong>Development:</strong> Run <code class="bg-skin-card px-2 py-1 rounded">npm run fetch-activity</code> to load GitHub data locally.</p>
              <p><strong>Production:</strong> Data is automatically updated every 6 hours via GitHub worker.</p>
            </div>
          </div>
        ) : (
          sortedYears.map((year) => (
            <div class="mb-8">
              {/* Year Header (only for non-current year) */}
              {year !== new Date().getFullYear() && (
                <div class="border-b border-skin-line mb-4">
                  <h2 class="text-2xl font-bold text-skin-accent py-3">{year}</h2>
                </div>
              )}

              {/* Repositories for this year */}
              <div class="space-y-3">
                {repositoriesByYear[year].map((repo) => (
                  <div class="border border-skin-line rounded-lg px-3 pt-3 pb-1 bg-skin-fill">
                    <div class="flex items-start justify-between mb-3">
                      <div class="flex-1">
                        <div class="flex items-center gap-2 mb-1">
                          <h3 class="text-lg font-semibold text-skin-accent">
                            <a
                              href={repo.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="hover:text-skin-accent/80 transition-colors"
                            >
                              {repo.owner === SITE.githubUsername
                                ? repo.name
                                : <><span class="text-gray-600 font-normal">{repo.owner}/</span>{repo.name}</>}
                            </a>
                          </h3>
                          {repo.primaryLanguage && (
                            <span
                              class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border border-skin-line"
                              style={`background-color: ${repo.primaryLanguage.color}20; color: ${repo.primaryLanguage.color}`}
                            >
                              <span class="text-[0.75rem] leading-none">{repo.primaryLanguage.name}</span>
                            </span>
                          )}
                          {isRepoNew(repo) && (
                            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-bold border border-skin-line bg-green-500/20 text-green-600">
                              <span class="text-[0.75rem] leading-none">New!</span>
                            </span>
                          )}
                        </div>
                        <p class="text-skin-base text-sm mb-2">{repo.description}</p>
                        <div class="flex items-center gap-4 text-sm text-gray-500">
                          {repo.activitySummary.prCount > 0 && (
                            <a
                              href={getGitHubSearchUrl(repo, 'pr')}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="flex items-center gap-1 hover:text-skin-accent transition-colors"
                              title="Pull requests authored"
                            >
                              <GitPullRequest class="w-4 h-4" aria-label="Pull requests" />
                              <span>{repo.activitySummary.prCount}</span>
                            </a>
                          )}
                          {repo.activitySummary.reviewCount > 0 && (
                            <a
                              href={getGitHubSearchUrl(repo, 'review')}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="flex items-center gap-1 hover:text-skin-accent transition-colors"
                              title="Pull request reviews submitted"
                            >
                              <Checklist class="w-4 h-4" aria-label="Reviews" />
                              <span>{repo.activitySummary.reviewCount}</span>
                            </a>
                          )}
                          {repo.activitySummary.mergeCount > 0 && (
                            <a
                              href={getGitHubSearchUrl(repo, 'merge')}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="flex items-center gap-1 hover:text-skin-accent transition-colors"
                              title="Pull requests merged"
                            >
                              <GitMerge class="w-4 h-4" aria-label="Merges" />
                              <span>{repo.activitySummary.mergeCount}</span>
                            </a>
                          )}
                          {repo.activitySummary.issueCount > 0 && (
                            <a
                              href={getGitHubSearchUrl(repo, 'issue')}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="flex items-center gap-1 hover:text-skin-accent transition-colors"
                              title="Issues opened or commented"
                            >
                              <CircleDot class="w-4 h-4" aria-label="Issues" />
                              <span>{repo.activitySummary.issueCount}</span>
                            </a>
                          )}
                          {repo.stargazerCount > 0 && (
                            <a
                              href={`${repo.url}/stargazers`}
                              target="_blank"
                              rel="noopener noreferrer"
                              class="flex items-center gap-1 hover:text-skin-accent transition-colors"
                              title="GitHub stars"
                            >
                              <Star class="w-4 h-4" aria-label="Stars" />
                              <span>{formatStarCount(repo.stargazerCount)}</span>
                            </a>
                          )}
                        </div>
                      </div>
                      <div class="text-sm text-skin-muted flex-shrink-0">
                        <div class="text-sm text-gray-500 flex-shrink-0">{formatDate(repo.lastActivity)}</div>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))
        )}
      </div>
    </section>
  </Main>
</Layout>
